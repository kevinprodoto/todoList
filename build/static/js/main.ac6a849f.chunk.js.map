{"version":3,"sources":["tools/todo-processing.js","components/NewTaskForm/NewTaskForm.jsx","components/Task/Task.jsx","components/TaskFilters/TaskFilters.jsx","components/Footer/Footer.jsx","components/TaskList/TaskList.jsx","components/App/App.jsx","containers/AppContainer/AppContainer.jsx","index.jsx"],"names":["Tools","maxId","createTodoItem","label","edit","completed","id","searchItems","todoData","search","length","filter","item","toLowerCase","indexOf","filterItems","NewTaskForm","state","onLabelChange","evv","setState","target","value","onSubmit","preventDefault","onItemAdded","props","this","className","onChange","placeholder","Component","defaultProps","Task","onDeleted","onToggleCompleted","onToggleEdit","classNames","onClick","type","formatDistanceToNow","Date","addSuffix","aria-label","TaskFilters","buttons","name","onFilterChange","map","clazz","Footer","todoCount","onClearAll","TaskList","todos","elements","itemProps","App","addItem","visibleItems","deleteItem","deleteAllCompleted","AppContainer","idx","findIndex","el","slice","newArray","forEach","text","newItem","toggleProp","arr","propName","oldItem","completedCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac6a849f.chunk.js","sourcesContent":["\r\nconst Tools = {\r\n  maxId: 100,\r\n  createTodoItem: (label) => {\r\n    Tools.maxId += 1;\r\n    return {\r\n      label, \r\n      edit: false,\r\n      completed: false,\r\n      id: Tools.maxId\r\n    }\r\n  },\r\n\r\n  searchItems: (todoData, search) => {\r\n      if (search.length === 0) {\r\n        return todoData;\r\n      }\r\n\r\n      return todoData.filter((item) => {\r\n        return item.label.toLowerCase().indexOf(search.toLowerCase()) > -1;\r\n      });\r\n  },\r\n\r\n  filterItems: (todoData, filter) => {\r\n      switch(filter) {\r\n        case \"All\":\r\n          return todoData;\r\n        case \"Active\": \r\n          return todoData.filter((item) => !item.completed);\r\n        case \"Completed\": \r\n          return todoData.filter((item) => item.completed);\r\n        default:\r\n          return todoData;   \r\n      }\r\n  },\r\n}\r\nexport default Tools;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class NewTaskForm extends Component {\r\n\r\n    state = {\r\n        label: \"\"\r\n    }\r\n\r\n    onLabelChange = (evv) => {\r\n        this.setState({\r\n            label: evv.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = (evv) => {\r\n        evv.preventDefault();\r\n        const{label} = this.state;\r\n        const {onItemAdded} = this.props;\r\n        if (label !== \"\") {\r\n            onItemAdded(label)\r\n            this.setState({\r\n                label: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const searchText = \"What needs to be done?\";\r\n        const{label} = this.state;\r\n        return (\r\n            <header className=\"header\">\r\n                <h1>todos</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input onChange={this.onLabelChange}\r\n                    className=\"new-todo\" \r\n                    placeholder={ searchText } \r\n                    value={label}/>\r\n                </form>\r\n            </header>\r\n        ) \r\n    }\r\n};\r\nNewTaskForm.defaultProps = {\r\n    onItemAdded: () => {},\r\n  }\r\n\r\n  NewTaskForm.propTypes = {\r\n    onItemAdded: PropTypes.func,\r\n  }","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\r\n\r\nconst Task = ({ label, onDeleted, onToggleCompleted, onToggleEdit, edit, completed}) => {\r\n\r\n        let classNames = \"\";\r\n        if (completed) {\r\n            classNames = \"completed\"\r\n        }\r\n        if (edit) {\r\n            classNames = \"edit\"\r\n        }\r\n        return (\r\n            <li className={classNames}>\r\n                <div className=\"view\">\r\n                    <input onClick = {onToggleCompleted} className=\"toggle\" type=\"checkbox\"/>\r\n                    <label>\r\n                        <span className=\"description\">{label}</span>\r\n                        <span className=\"created\">{formatDistanceToNow(new Date(), {addSuffix: true})}</span>\r\n                    </label>\r\n                    <button type = \"button\" aria-label=\"edit\" className=\"icon icon-edit\" onClick={onToggleEdit} />\r\n                    <button type = \"button\" aria-label=\"destroy\" className=\"icon icon-destroy\" onClick={onDeleted} />\r\n                </div>\r\n            </li>\r\n        )\r\n};\r\nTask.defaultProps = {\r\n    label: \"\",\r\n    onDeleted: () => {},\r\n    onToggleCompleted: () => {},\r\n    onToggleEdit: () => {},\r\n    edit: false,\r\n    completed: false\r\n}\r\nTask.propTypes = {\r\n    label: PropTypes.string,\r\n    onDeleted: PropTypes.func,\r\n    onToggleCompleted: PropTypes.func,\r\n    onToggleEdit: PropTypes.func,\r\n    edit: PropTypes.bool,\r\n    completed: PropTypes.bool\r\n}\r\nexport default Task;","import React, {Component} from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TaskFilters extends Component {\r\n\r\n    buttons = [\r\n        {name: \"All\", label: \"All\"},\r\n        {name: \"Active\", label: \"Active\"},\r\n        {name: \"Completed\", label: \"Completed\"}\r\n    ]\r\n\r\n    render() {\r\n        const {filter, onFilterChange} = this.props;\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const isSelected = filter === name;\r\n            const clazz = isSelected ? \"selected\" : \"\";\r\n                return (\r\n                    <li className = {clazz}><button type = \"button\" onClick = {() => onFilterChange(name)}>{label}</button></li>\r\n                )\r\n        })\r\n        return (\r\n            <ul className=\"filters\">\r\n                {buttons}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTaskFilters.defaultProps = {\r\n    onFilterChange: () => {},\r\n    filter: \"All\",\r\n}\r\nTaskFilters.propTypes = {\r\n    filter: PropTypes.string,\r\n    onFilterChange: PropTypes.func,\r\n  }","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport TaskFilters from \"../TaskFilters/TaskFilters\";\r\n\r\nconst Footer = ({todoCount, onClearAll, filter, onFilterChange}) => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span className=\"todo-count\">{todoCount} items left</span>\r\n                <TaskFilters filter = {filter} onFilterChange = {onFilterChange}/>\r\n            <button type = \"button\" onClick={onClearAll} className=\"clear-completed\">Clear completed</button>\r\n        </footer>\r\n    )\r\n}\r\n\r\nFooter.defaultProps = {\r\n    todoCount: 0,\r\n    filter: \"All\",\r\n    onClearAll: () => {},\r\n    onFilterChange: () => {},\r\n}\r\nFooter.propTypes = {\r\n    onClearAll: PropTypes.func,\r\n    onFilterChange: PropTypes.func,\r\n    filter: PropTypes.string,\r\n    todoCount: PropTypes.number\r\n}\r\nexport default Footer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from \"../Task/Task\";\r\nimport Footer from \"../Footer/Footer\"\r\n\r\nconst TaskList = ({todos, onDeleted, onToggleCompleted, onToggleEdit, todoCount, onClearAll, filter, onFilterChange}) => {\r\n    const elements = todos.map((item) => {\r\n        const { id, ...itemProps} = item;\r\n\r\n        return (\r\n            <Task key ={id} {...itemProps} \r\n            onDeleted={() => onDeleted(id)}\r\n            onToggleCompleted={() => onToggleCompleted(id)}\r\n            onToggleEdit={() => onToggleEdit(id)}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <section className=\"main\">\r\n            <ul className=\"todo-list\">\r\n                { elements }\r\n            </ul>\r\n            <Footer todoCount={todoCount}\r\n                    onClearAll={onClearAll}\r\n                    filter = {filter}\r\n                    onFilterChange = {onFilterChange}/>\r\n        </section>\r\n    )\r\n}\r\nTaskList.defaultProps = {\r\n    todos: [],\r\n    onDeleted: () => {},\r\n    onToggleCompleted: () => {},\r\n    onToggleEdit: () => {},\r\n    onClearAll: () => {},\r\n    onFilterChange: () => {},\r\n    todoCount: 0,\r\n    filter: \"All\",\r\n    map: () => {}\r\n}\r\n\r\nTaskList.propTypes = {\r\n    onDeleted: PropTypes.func,\r\n    onToggleCompleted: PropTypes.func,\r\n    onToggleEdit: PropTypes.func,\r\n    onClearAll: PropTypes.func,\r\n    onFilterChange: PropTypes.func,\r\n    filter: PropTypes.string,\r\n    map: PropTypes.func,\r\n    todos: PropTypes.node,\r\n    todoCount: PropTypes.number\r\n}\r\n  export default TaskList;","/* eslint linebreak-style: [\"error\", \"windows\"] */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\r\nimport TaskList from '../TaskList/TaskList';\r\n\r\n\r\nconst App = ({addItem, visibleItems, deleteItem, onToggleCompleted, onToggleEdit, deleteAllCompleted, todoCount, filter, onFilterChange}) => {\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <NewTaskForm onItemAdded={addItem}/>\r\n        <TaskList \r\n        todos = {visibleItems}\r\n        onDeleted ={deleteItem}\r\n        onToggleCompleted={onToggleCompleted}\r\n        onToggleEdit={onToggleEdit}\r\n        onClearAll={deleteAllCompleted}\r\n        todoCount={todoCount}\r\n        filter = {filter}\r\n        onFilterChange = {onFilterChange}/>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  App.defaultProps = {\r\n    addItem: () => {},\r\n    visibleItems: () => {},\r\n    onToggleCompleted: () => {},\r\n    onToggleEdit: () => {},\r\n    deleteAllCompleted: () => {},\r\n    deleteItem: () => {},\r\n    onFilterChange: () => {},\r\n    todoCount: 3,\r\n    filter: \"All\",\r\n    \r\n  }\r\n\r\n  App.propTypes = {\r\n    addItem: PropTypes.func,\r\n    visibleItems: PropTypes.func,\r\n    onToggleCompleted: PropTypes.func,\r\n    onToggleEdit: PropTypes.func,\r\n    deleteAllCompleted: PropTypes.func,\r\n    deleteItem: PropTypes.func,\r\n    todoCount: PropTypes.number,\r\n    filter: PropTypes.string,\r\n    onFilterChange: PropTypes.func,\r\n  }\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nimport Tools from \"../../tools/todo-processing\";\r\n\r\nimport App from \"../../components/App/App\"\r\n\r\nexport default class AppContainer extends Component {\r\n\r\n    state = {\r\n      todoData: [\r\n        Tools.createTodoItem('Drink Coffee'),\r\n        Tools.createTodoItem('Make Awesome App'),\r\n        Tools.createTodoItem('Have a lunch'),\r\n      ],\r\n      filter: 'All',\r\n      search: '',\r\n    }\r\n  \r\n    deleteItem = (id) => {\r\n      this.setState(({todoData}) => {\r\n        const idx = todoData.findIndex((el) => el.id=== id);\r\n        const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)]\r\n        return {\r\n          todoData: newArray\r\n        }\r\n      })\r\n    }\r\n  \r\n    deleteAllCompleted = () => {\r\n      this.setState(({todoData}) => {\r\n        const newArray = [...todoData];\r\n        newArray.forEach(item => {\r\n          if (item.completed) {\r\n            this.deleteItem(item.id);\r\n          }\r\n          return {\r\n            todoData: newArray\r\n          }       \r\n        });\r\n      })\r\n    }\r\n  \r\n    addItem = (text) => {\r\n      const newItem = Tools.createTodoItem(text);\r\n      this.setState(({todoData}) => {\r\n        const newArray = [...todoData, newItem]\r\n        return {\r\n          todoData: newArray\r\n        }\r\n      })\r\n    }\r\n  \r\n    onToggleCompleted = (id) => {\r\n      this.setState(({todoData}) => {\r\n        return {\r\n          todoData: this.toggleProp(todoData, id, \"completed\")\r\n        }\r\n      })\r\n    }\r\n  \r\n    onToggleEdit = (id) => {\r\n      this.setState(({todoData}) => {\r\n        return {\r\n          todoData: this.toggleProp(todoData, id, \"edit\")\r\n        }\r\n      })\r\n    }\r\n  \r\n    onFilterChange = (filter) => {\r\n      this.setState({filter})\r\n    }\r\n  \r\n    toggleProp = (arr, id, propName) => {\r\n      const idx = arr.findIndex((el) => el.id === id);\r\n      const oldItem = arr[idx];\r\n      const newItem = {...oldItem, [propName]: !oldItem[propName]};\r\n      return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)]\r\n    }\r\n    \r\n    render() {\r\n      \r\n      const {todoData, filter, search} = this.state;\r\n      const completedCount = todoData.filter((el) => el.completed).length;\r\n\r\n      const todoCount = todoData.length - completedCount;\r\n  \r\n      const visibleItems = Tools.searchItems(Tools.filterItems(todoData, filter), search);\r\n      return <App addItem = {this.addItem}\r\n                  visibleItems = {visibleItems}\r\n                  deleteItem = {this.deleteItem}\r\n                  onToggleCompleted = {this.onToggleCompleted}\r\n                  onToggleEdit = {this.onToggleEdit}\r\n                  deleteAllCompleted = {this.deleteAllCompleted}\r\n                  todoCount = {todoCount}\r\n                  filter = {filter}\r\n                  onFilterChange = {this.onFilterChange}/>\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppContainer from './containers/AppContainer/AppContainer';\r\n\r\nReactDOM.render(<AppContainer />,\r\n  document.getElementById('root'));"],"sourceRoot":""}